{"version":3,"sources":["utils/calendar.js","components/Datepicker/index.jsx","components/RadioButtonsForm/index.jsx","components/InputsForm/index.jsx","App.jsx","index.js"],"names":["DAYS_IN_MONTH","WEEK_DAYS_FROM_MONDAY","Month","years","monthNames","weekDayNames","areEqual","a","b","getFullYear","getMonth","getDate","getMonthData","year","month","result","date","Date","daysInMonth","isLeapYear","getDaysInMonth","monthStartsOn","dayOfWeek","getDay","getDayOfWeek","day","i","j","undefined","Datepicker","onChange","Function","prototype","type","calendar","useState","setDate","startDate","setStartDate","endDate","setEndDate","selectedDates","setSelectedDates","useEffect","monthData","fillSelectedDates","milisecondsInDay","getTime","t","prev","className","onClick","disabled","value","event","target","map","name","index","length","week","classNames","some","selectedDate","every","handleDayClick","RadioButtonsForm","onChangeValue","e","defaultChecked","InputsForm","start","end","ranges","range","App","setType","toLocaleDateString","handleChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26d39e4d.chunk.js","sourcesContent":["const DAYS_IN_WEEK = 7;\r\n\r\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\r\nconst WEEK_DAYS_FROM_MONDAY = [6, 0, 1, 2, 3, 4, 5];\r\n\r\nconst Month = {\r\n    January: 0,\r\n    February: 1,\r\n    March: 2,\r\n    April: 3,\r\n    May: 4,\r\n    June: 5,\r\n    July: 6,\r\n    August: 7,\r\n    September: 8,\r\n    October: 9,\r\n    Novermber: 10,\r\n    December: 11\r\n};\r\n\r\nexport const years = [\r\n    2000,\r\n    2001,\r\n    2002,\r\n    2003,\r\n    2004,\r\n    2005,\r\n    2006,\r\n    2007,\r\n    2008,\r\n    2009,\r\n    2010,\r\n    2011,\r\n    2012,\r\n    2013,\r\n    2014,\r\n    2015,\r\n    2016,\r\n    2017,\r\n    2018,\r\n    2019,\r\n    2020,\r\n    2021,\r\n    2022,\r\n    2023,\r\n    2024,\r\n    2025,\r\n];\r\n\r\nexport const monthNames = [\r\n    'Січень',\r\n    'Лютий',\r\n    'Березень',\r\n    'Квітень',\r\n    'Травень',\r\n    'Червень',\r\n    'Липень',\r\n    'Серпень',\r\n    'Вересень',\r\n    'Жовтень',\r\n    'Листопад',\r\n    'Грудень',\r\n];\r\n\r\nexport const weekDayNames = [\r\n    'Пн',\r\n    'Вт',\r\n    'Ср',\r\n    'Чт',\r\n    'Пт',\r\n    'Сб',\r\n    'Нд',\r\n];\r\n\r\nexport function areEqual(a, b) {\r\n    if (!a || !b) return false;\r\n\r\n    return (\r\n        a.getFullYear() === b.getFullYear() &&\r\n        a.getMonth() === b.getMonth() &&\r\n        a.getDate() === b.getDate()\r\n    );\r\n}\r\n\r\nexport function isLeapYear(year) {\r\n    return !((year % 4) || (!(year % 100) && (year % 400)));\r\n}\r\n\r\nexport function getDaysInMonth(date) {\r\n    const month = date.getMonth();\r\n    const year = date.getFullYear();\r\n    const daysInMonth = DAYS_IN_MONTH[month];\r\n    \r\n    if (isLeapYear(year) && month === Month.February) {\r\n        return daysInMonth + 1;\r\n    } else {\r\n        return daysInMonth;\r\n    }\r\n}\r\n\r\nexport function getDayOfWeek(date) {\r\n    const dayOfWeek = date.getDay();\r\n\r\n    return WEEK_DAYS_FROM_MONDAY[dayOfWeek];\r\n}\r\n\r\nexport function getMonthData(year, month) {\r\n    const result = [];\r\n    const date = new Date(year, month);\r\n    const daysInMonth = getDaysInMonth(date);\r\n    const monthStartsOn = getDayOfWeek(date);\r\n    let day = 1;\r\n\r\n    for (let i = 0; i < (daysInMonth + monthStartsOn) / DAYS_IN_WEEK; i++) {\r\n        result[i] = [];\r\n        \r\n        for (let j = 0; j < DAYS_IN_WEEK; j++) {\r\n            if ((i === 0 && j < monthStartsOn) || day > daysInMonth) {\r\n                result[i][j] = undefined;\r\n            } else {\r\n                result[i][j] = new Date(year, month, day++);\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { useState, useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport * as calendar from '../../utils/calendar';\r\nimport './index.css';\r\n\r\nconst Datepicker = ({\r\n    onChange = Function.prototype,\r\n    type,\r\n    years = calendar.years,\r\n    monthNames = calendar.monthNames,\r\n    weekDayNames = calendar.weekDayNames,\r\n}) => {\r\n    \r\n    const [date, setDate] = useState(new Date());\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [selectedDates, setSelectedDates] = useState([]);\r\n\r\n    useEffect(() => {\r\n        onChange(startDate, endDate);\r\n    }, [startDate, endDate, onChange]);\r\n\r\n    useEffect(() => {\r\n        setSelectedDates([]);\r\n        setStartDate(null);\r\n        setEndDate(null);\r\n    },[type])\r\n\r\n    const monthData = calendar.getMonthData(date.getFullYear(), date.getMonth());\r\n\r\n    const handlePrevMonthButtonClick = () => {\r\n        setDate(new Date(date.getFullYear(), date.getMonth() - 1));\r\n    };\r\n\r\n    const handleNextMonthButtonClick = () => {\r\n        setDate(new Date(date.getFullYear(), date.getMonth() + 1));\r\n    };\r\n\r\n    const handleSelectYearChange = (event) => {\r\n        const year = event.target.value;\r\n        setDate(new Date(year, date.getMonth()));\r\n    };\r\n\r\n    const handleSelectMonthChange = (event) => {\r\n        const month = event.target.value;\r\n        setDate(new Date(date.getFullYear(), month));\r\n    };\r\n    \r\n    const fillSelectedDates = (startDate, endDate) => {\r\n        const milisecondsInDay = 86400000;\r\n        if (startDate.getTime() < endDate.getTime()) {\r\n            for (let t = startDate.getTime(); t <= endDate.getTime(); t += milisecondsInDay) {\r\n                setSelectedDates(prev => [...prev, new Date(t)])\r\n            }\r\n        } else {\r\n            for (let t = endDate.getTime(); t <= startDate.getTime(); t += milisecondsInDay) {\r\n                setSelectedDates(prev => [...prev, new Date(t)])\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleDayClick = date => {\r\n        if (type && type === 'simple') {\r\n            if (calendar.areEqual(date, startDate)) {\r\n                setStartDate(null);\r\n                return;\r\n        }\r\n            setStartDate(date);\r\n        }\r\n        if (type && type === 'range') {\r\n            if (startDate === null) {\r\n                setStartDate(date);\r\n            }\r\n            if (startDate !== null && (date.getTime() === startDate.getTime())) {\r\n                setStartDate(null);\r\n                setEndDate(null);\r\n                setSelectedDates([]);\r\n            }\r\n            if (startDate !== null && (date.getTime() !== startDate.getTime()) && endDate === null) {\r\n                setEndDate(date);\r\n                fillSelectedDates(startDate, date);\r\n            }\r\n            if (startDate !== null && endDate !== null && (startDate && date.getTime() !== startDate.getTime())\r\n                && selectedDates.every(selectedDate => (selectedDate.getTime() !== date.getTime()))) {\r\n                    setStartDate(date);\r\n                    setEndDate(null);\r\n                    setSelectedDates([]);\r\n            }\r\n            if (startDate !== null && endDate !== null && (startDate && date.getTime() !== startDate.getTime())\r\n                && selectedDates.some(selectedDate => selectedDate.getTime() === date.getTime())) {\r\n                    setSelectedDates([]);\r\n                    setEndDate(date);\r\n                    fillSelectedDates(startDate, date);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"calendar\">\r\n            <header>\r\n                <button\r\n                    onClick={handlePrevMonthButtonClick}\r\n                    disabled={date.getFullYear() === years[0] && date.getMonth() === 0}\r\n                >\r\n                    {'<'}\r\n                </button>\r\n\r\n                <select\r\n                    value={date.getMonth()}\r\n                    onChange={handleSelectMonthChange}\r\n                >\r\n                    {monthNames.map((name, index) =>\r\n                        <option key={name} value={index}>{name}</option>\r\n                    )}\r\n                </select>\r\n\r\n                <select\r\n                    value={date.getFullYear()}\r\n                    onChange={handleSelectYearChange}\r\n                >\r\n                    {years.map(year =>\r\n                        <option key={year} value={year}>{year}</option>\r\n                    )}\r\n                </select>\r\n\r\n                <button\r\n                    onClick={handleNextMonthButtonClick}\r\n                    disabled={date.getFullYear() === years[years.length - 1] && date.getMonth() === 11}\r\n                >\r\n                    {'>'}\r\n                </button>\r\n            </header>\r\n\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        {weekDayNames.map(name =>\r\n                            <th key={name}>{name}</th>\r\n                        )}\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {monthData.map((week, index) =>\r\n                        <tr key={index} className=\"week\">\r\n                            {week.map((date, index) => date ?\r\n                                <td\r\n                                    key={index}\r\n                                    className={classNames('day', {\r\n                                        'today': calendar.areEqual(date, new Date()),\r\n                                        'selected': calendar.areEqual(date,startDate) || selectedDates.some(selectedDate => calendar.areEqual(date,selectedDate))\r\n                                    })}\r\n                                    onClick={() => handleDayClick(date)}\r\n                                >{date.getDate()}</td>\r\n                                :\r\n                                <td key={index} />\r\n                            )}\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nDatepicker.propTypes = {\r\n    onChange: PropTypes.func.isRequired,\r\n    type: PropTypes.string,\r\n    years: PropTypes.oneOf([2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025]),\r\n    monthNames: PropTypes.oneOf(['Січень', 'Лютий', 'Березень', 'Квітень', 'Травень', 'Червень', 'Липень', 'Серпень', 'Вересень', 'Жовтень', 'Листопад', 'Грудень']),\r\n    weekDayNames: PropTypes.oneOf(['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Нд']),\r\n}\r\n\r\nexport default Datepicker;","import PropTypes from 'prop-types';\r\nimport './index.css';\r\n\r\nconst RadioButtonsForm = ({ onChange }) => {\r\n\r\n    const onChangeValue = (e) => {\r\n        onChange(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className='radiobuttons-form' onChange={(e) => onChangeValue(e)}>\r\n            <label>\r\n                <input\r\n                    type=\"radio\"\r\n                    value=\"simple\"\r\n                    name=\"type\"\r\n                    defaultChecked\r\n                />\r\n                Simple\r\n            </label>\r\n            <label>\r\n                <input\r\n                    type=\"radio\"\r\n                    value=\"range\"\r\n                    name=\"type\"\r\n                />\r\n                Range\r\n            </label>\r\n            <label>\r\n                <input\r\n                    type=\"radio\"\r\n                    value=\"multirange\"\r\n                    name=\"type\"\r\n                />\r\n                Multirange\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nRadioButtonsForm.propTypes = {\r\n    onChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default RadioButtonsForm;","import PropTypes from 'prop-types';\r\nimport './index.css';\r\n\r\nconst InputsForm = ({ type, start, end, ranges }) => {\r\n    \r\n    if (type === 'simple') {\r\n        return (\r\n            <div className='inputs'>\r\n                <input disabled value={start} />        \r\n            </div>\r\n        );\r\n    }\r\n\t\t\t\t\r\n\tif (type === 'range') {  \r\n        return (\r\n            <div className='inputs'>\r\n                <input disabled value={start} />\r\n                __\r\n                <input disabled value={end} />\r\n            </div>\r\n        );\r\n\t}\r\n\r\n    if (type === 'multirange') {\r\n        return (\r\n            <>\r\n                {ranges.map((range) => range ?\r\n                    <div className='inputs' key={range}>\r\n                        <input disabled value={start} />\r\n                        __\r\n                        <input disabled value={start} />\r\n                    </div>\r\n                    :\r\n                    <></>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nInputsForm.propTypes = {\r\n    type: PropTypes.string,\r\n    start: PropTypes.string,\r\n    end: PropTypes.string,\r\n    ranges: PropTypes.array,\r\n}\r\n\r\nexport default InputsForm;","import { useState } from 'react';\nimport Datepicker from './components/Datepicker';\nimport RadioButtonsForm from './components/RadioButtonsForm';\nimport InputsForm from 'components/InputsForm';\n\nconst App = () => {\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null)\n\tconst [type, setType] = useState('simple');\n\tconst ranges = [1, 2, 3];\n\t\n\tconst handleChange = (startDate, endDate) => {\n\t\tif (type === 'simple') {\n\t\t\tsetStartDate(startDate);\n\t\t}\n\t\tif (type === 'range') {\n\t\t\tif (startDate && endDate && startDate.getTime() > endDate.getTime()) {\n\t\t\t\tsetStartDate(endDate);\n\t\t\t\tsetEndDate(startDate);\n\t\t\t} else {\n\t\t\t\tsetStartDate(startDate);\n\t\t\t\tsetEndDate(endDate);\n\t\t\t}\n\t\t}\n\t\tif (type === 'multirange') {\n\t\t//\tTODO:  додати логіку для мультирендж\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<RadioButtonsForm\n\t\t\t\tonChange={(type) => setType(type)}\n\t\t\t/>\n\n\t\t\t<InputsForm\n\t\t\t\ttype={type}\n\t\t\t\tstart={startDate\n\t\t\t\t\t? startDate.toLocaleDateString()\n\t\t\t\t\t: '--.--.----'\n\t\t\t\t}\n\t\t\t\tend={endDate\n\t\t\t\t\t? endDate.toLocaleDateString()\n\t\t\t\t\t: '--.--.----'\n\t\t\t\t}\n\t\t\t\tranges={ranges}\n\t\t\t/>\n\n\t\t\t<Datepicker\n\t\t\t\tonChange={(startDate, endDate) => handleChange(startDate, endDate)}\n\t\t\t\ttype={type}\n\t\t\t/>\n\n\t\t</div>\n\t);\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}